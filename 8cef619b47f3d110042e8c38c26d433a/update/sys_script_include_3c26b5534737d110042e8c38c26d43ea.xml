<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_307427_now_open.openaiUtils</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description>Open AI code utilities.</description>
        <name>openaiUtils</name>
        <script><![CDATA[var openaiUtils = Class.create();
openaiUtils.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {

	OPEN_AI_KEY: gs.getProperty("x_307427_now_open.open.ai.api.key"),
	OPEN_AI_MODEL: gs.getProperty("x_307427_now_open.open.ai.api.model"),
	OPEN_AI_MAX_TOKENS: +gs.getProperty("x_307427_now_open.open.ai.api.max.tokens"),
	OPEN_AI_MAX_TEMPERATURE: +gs.getProperty("x_307427_now_open.open.ai.api.temperature"),
	
	getOpenAIResponse:function(recOAIA){
		try { 
			var recGR = !recOAIA ? this.getParameter('sysparm_buildingid'): recOAIA;
			
			if(recGR){
				recOAIA.processing= "processing";
				recOAIA.update();
			}
			
			var raw = JSON.stringify({
				"model": recGR.getValue("model"),
				"prompt": recGR.getValue("prompt"),
				"temperature": this.OPEN_AI_MAX_TEMPERATURE,
				"max_tokens": +recGR.getValue("max_tokens"),
			});

			var r = new sn_ws.RESTMessageV2('x_307427_now_open.Open AI', 'POST');
			r.setRequestHeader("Authorization", "Bearer " + this.OPEN_AI_KEY);
			r.setRequestHeader("Content-Type", "application/json");
			r.setRequestBody(raw);

			var response = r.execute();
			var responseBody = response.getBody();	 
			var httpStatus = response.getStatusCode();

			var text= JSON.parse(responseBody).choices[0].text;

			text= text.replace(/\n/g,'<br>');
			
			if(text && text != ""){
				recOAIA.answer= text;
				recOAIA.processing= "success";
				recOAIA.update();
			}else{
				recOAIA.answer= "No response!, Try with different prompt value";
				recOAIA.processing= "failed";
				recOAIA.update();
			}
		}
		catch(ex) {
			return ex.message;
		}
	},
	
	getOpenAIResponseVA:function(vaInput){
		try { 
			
			/*var previous_prompt = "i wanna eat";
			var user_response = "What would you like to eat?";
			var history = "Bot: " + previous_prompt + "\nUser: " + user_response;
			var context = "{\"previous_prompt\":\"" + previous_prompt + "\", \"user_response\":\"" + user_response + "\"}";
			// Set the memory parameter
			var memory = [
				{"text": previous_prompt, "speaker": "bot"},
				{"text": user_response, "speaker": "user"}
			];*/
			
			var raw = JSON.stringify({
				"model": this.OPEN_AI_MODEL,
				"prompt": "" + vaInput,
				"temperature": this.OPEN_AI_MAX_TEMPERATURE,
				"max_tokens": this.OPEN_AI_MAX_TOKENS,
				//"memory": memory
			});

			//gs.info("6468466 " + vaInput)
			
			var r = new sn_ws.RESTMessageV2('x_307427_now_open.Open AI', 'POST');
			r.setRequestHeader("Authorization", "Bearer " + this.OPEN_AI_KEY);
			r.setRequestHeader("Content-Type", "application/json");
			r.setRequestBody(raw);

			var response = r.execute();
			var responseBody = response.getBody();	 
			var httpStatus = response.getStatusCode();

			return JSON.parse(responseBody).choices[0].text;

		}
		catch(ex) {
			return ex.message;
		}
	},
	
    type: 'openaiUtils'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-21 12:48:08</sys_created_on>
        <sys_id>3c26b5534737d110042e8c38c26d43ea</sys_id>
        <sys_name>openaiUtils</sys_name>
        <sys_package display_value="Now Open AI" source="x_307427_now_open">8cef619b47f3d110042e8c38c26d433a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Now Open AI">8cef619b47f3d110042e8c38c26d433a</sys_scope>
        <sys_update_name>sys_script_include_3c26b5534737d110042e8c38c26d43ea</sys_update_name>
    </sys_script_include>
</record_update>
