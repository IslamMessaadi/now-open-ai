<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_307427_now_open.openaiUtils</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description>Open AI code utilities.</description>
        <name>openaiUtils</name>
        <script><![CDATA[var openaiUtils = Class.create();
openaiUtils.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {

	OPEN_AI_KEY: gs.getProperty("x_307427_now_open.open.ai.api.key"),
	OPEN_AI_MODEL: gs.getProperty("x_307427_now_open.open.ai.api.model"),
	OPEN_AI_MAX_TOKENS: +gs.getProperty("x_307427_now_open.open.ai.api.max.tokens"),
	OPEN_AI_TEMPERATURE: +gs.getProperty("x_307427_now_open.open.ai.api.temperature"),
	OPEN_AI_BLACK_LIST: gs.getProperty("x_307427_now_open.open.ai.api.blacklist.keywords"),
	LOG_ON: true,
	MAX_TIMEOUT: 3000,
	
	getOpenAIResponse:function(recOAIA){
		try { 
			var recGR = !recOAIA ? this.getParameter('sysparm_buildingid'): recOAIA;
			
			if(recGR){
				recOAIA.processing= "processing";
				recOAIA.update();
			}
			
			var raw = JSON.stringify({
				"model": recGR.getValue("model"),
				"prompt": recGR.getValue("prompt"),
				"temperature": this.OPEN_AI_TEMPERATURE,
				"max_tokens": +recGR.getValue("max_tokens"),
			});

			var r = new sn_ws.RESTMessageV2('x_307427_now_open.Open AI', 'POST');
			r.setRequestHeader("Authorization", "Bearer " + this.OPEN_AI_KEY);
			r.setRequestHeader("Content-Type", "application/json");
			r.setRequestBody(raw);

			var response = r.execute();
			var responseBody = response.getBody();	 
			var httpStatus = response.getStatusCode();

			if(httpStatus == 200){
				var text= JSON.parse(responseBody).choices[0].text;

				text= text.replace(/\n/g,'<br>');
				
				if(text && text != ""){
					recOAIA.answer= text;
					recOAIA.processing= "success";
					recOAIA.update();
				}else{
					recOAIA.answer= "No response!, Try with different prompt value";
					recOAIA.processing= "failed";
					recOAIA.update();
				}

				this.saveHistory(JSON.parse(responseBody).id, recGR.getValue("prompt"), text, "OpenAI Answer");

			}else {
				recOAIA.answer= "OpenAI Service Temporarily Unavailable ("+httpStatus+")";
				recOAIA.processing= "failed";
				recOAIA.update();
			}
			
		}
		catch(ex) {
			return ex.message;
		}
	},
	
	getOpenAIResponseVA:function(previousResponse , vaInput){
		try { 
			
			if(this.LOG_ON){
				//level00
				gs.info("level00 ---> " + previousResponse);
				gs.info("level00 ---> " + vaInput);
			}

			/*var previous_prompt = "what is servicenow?";
			var user_response = "What would you like to eat?";
			var history = "Bot: " + previous_prompt + "\nUser: " + user_response;
			var context = "{\"previous_prompt\":\"" + previous_prompt + "\", \"user_response\":\"" + user_response + "\"}";
			// Set the memory parameter
			var memory = [
				{"text": previous_prompt, "speaker": "bot"},
				{"text": user_response, "speaker": "user"}
			];*/
			
			var raw = JSON.stringify({
				"model": this.OPEN_AI_MODEL,
				"prompt": previousResponse ? previousResponse + " " + vaInput : "" + vaInput,
				"temperature": this.OPEN_AI_TEMPERATURE,
				"max_tokens": this.OPEN_AI_MAX_TOKENS,
				//"memory": memory
			});

			if(this.LOG_ON){
				//level01
				gs.info("level01 ---> " + raw);
			}
			
			var r = new sn_ws.RESTMessageV2('x_307427_now_open.Open AI', 'POST');
			r.setRequestHeader("Authorization", "Bearer " + this.OPEN_AI_KEY);
			r.setRequestHeader("Content-Type", "application/json");
			r.setHttpTimeout(this.MAX_TIMEOUT); 
			r.setRequestBody(raw);
			var response = r.execute();
			var responseBody = response.getBody();	 
			var httpStatus = response.getStatusCode();

			if(httpStatus == 200){
				if(this.LOG_ON){
					//level02
					gs.info("level02 ---> " + httpStatus +" - "+ responseBody);
				}
	
				if(JSON.parse(responseBody).error){
					return JSON.parse(responseBody).error.message +"\nPlease dont forget to update api key property.";
				}
	
				var answerObj= JSON.parse(responseBody);
				var text= answerObj.choices[0].text.trim();
	
				if(this.LOG_ON){
					//level03
					gs.info("level03 ---> " + text);
					//gs.info("level: 3 " + /^(\.*\s*)/gm.test(text));
				}
	
				//error by response! not accepted as a prompet!
				if(/^(\.*\s*)/gm.test(text)){
					text= text.replace(/^(\.*\s*)/gm, "");
				}
				
				this.saveHistory(answerObj.id, vaInput.toString(), text, "Virtual Agent");
	
				if(this.LOG_ON){
					//level04
					gs.info("level04 ---> " +  text);
				}
			
				return text;

			}else {

				return "OpenAI Service Temporarily Unavailable ("+httpStatus+")";

			}
		}
		catch(ex) {
			return ex.message;
		}
	},

	getOpenAIResponseContext:function(history , prompt, source){
		try { 
			
			if(this.LOG_ON){
				//level00
				gs.info("level00 ---> " + history);
				gs.info("level00 ---> " + prompt);
			}

			var raw = JSON.stringify({
				"model": this.OPEN_AI_MODEL,
				"prompt": history ? history + " " + prompt : "" + prompt,
				"temperature": this.OPEN_AI_TEMPERATURE,
				"max_tokens": this.OPEN_AI_MAX_TOKENS,
			});

			if(this.LOG_ON){
				//level01
				gs.info("level01 ---> " + raw);
			}
			
			var r = new sn_ws.RESTMessageV2('x_307427_now_open.Open AI', 'POST');
			r.setRequestHeader("Authorization", "Bearer " + this.OPEN_AI_KEY);
			r.setRequestHeader("Content-Type", "application/json");
			r.setHttpTimeout(this.MAX_TIMEOUT); 
			r.setRequestBody(raw);
			var response = r.execute();
			var responseBody = response.getBody();	 
			var httpStatus = response.getStatusCode();

			if(httpStatus == 200){
				if(this.LOG_ON){
					//level02
					gs.info("level02 ---> " + httpStatus +" - "+ responseBody);
				}
	
				if(JSON.parse(responseBody).error){
					return JSON.parse(responseBody).error.message +"\nPlease dont forget to update api key property.";
				}
	
				var answerObj= JSON.parse(responseBody);
				var text= answerObj.choices[0].text.trim();
	
				if(this.LOG_ON){
					//level03
					gs.info("level03 ---> " + text);
					//gs.info("level: 3 " + /^(\.*\s*)/gm.test(text));
				}
	
				//error by response! not accepted as a prompet!
				if(/^(\.*\s*)/gm.test(text)){
					text= text.replace(/^(\.*\s*)/gm, "");
				}
				
				this.saveHistory(answerObj.id, prompt, text, source);
	
				if(this.LOG_ON){
					//level04
					gs.info("level04 ---> " +  text);
				}
			
				return text;

			}else {

				return "OpenAI Service Temporarily Unavailable ("+httpStatus+")";

			}
		}
		catch(ex) {
			return ex.message;
		}
	},
	
	saveHistory:function(id, prompt, response, source){
		var flagged= false;
		var flag= "";
		var blk= this.OPEN_AI_BLACK_LIST.toLowerCase().split(",") || [];

		if(blk != ""){
			flagged= blk.some(function(keyword){
				return prompt.toLowerCase().search(keyword) != -1;
			});
		}

		if(this.LOG_ON){
			//level05
			gs.info("level05 ---> " + flagged);
		}

		if (flagged) {
			flag= "inappropriate";
		}else if(response.length > 50){
			flag= "informative";
		}

		var interactionRefId= source == "Virtual Agent" ? this.getInteraction() : "";
		var chtGr = new GlideRecord("x_307427_now_open_chat_history");
		chtGr.id = id;
		chtGr.prompt= prompt;
		chtGr.response= response;
		chtGr.interaction = interactionRefId;
		chtGr.flag = flag;
		chtGr.source = source;
		chtGr.insert();
	},
	
	clearHistory:function(){
		var chtGr = new GlideRecord("x_307427_now_open_chat_history");
		chtGr.query();
		chtGr.deleteMultiple();
	},

	getInteraction:function(){
		var currentGr = new GlideRecord("interaction");
		currentGr.addEncodedQuery("state=work_in_progress^type=chat^assigned_to=200c5e64f94611108c8bd16244dfe704^opened_forDYNAMIC90d1921e5f510100a9ad2572f2b477fe");
		currentGr.query();
		if (currentGr.next()) {
		return currentGr.sys_id;
		}
		return null;
	},

	getContexts:function(){
		var contextList=[];
		var historyGr = new GlideRecord("x_307427_now_open_chat_history");
		historyGr.query();
		while (historyGr.next()) {
			contextList.push({source: historyGr.source, prompt: historyGr.prompt});
		}
		return contextList;
	},
	
    type: 'openaiUtils'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-21 12:48:08</sys_created_on>
        <sys_id>3c26b5534737d110042e8c38c26d43ea</sys_id>
        <sys_name>openaiUtils</sys_name>
        <sys_package display_value="Now Open AI" source="x_307427_now_open">8cef619b47f3d110042e8c38c26d433a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Now Open AI">8cef619b47f3d110042e8c38c26d433a</sys_scope>
        <sys_update_name>sys_script_include_3c26b5534737d110042e8c38c26d43ea</sys_update_name>
    </sys_script_include>
</record_update>
